// Define finance related types

// Assuming Booking type might be needed here or imported
// If defined elsewhere, import it: import { Booking } from '@/api/bookingsApi'; 
// For now, define a basic placeholder if not imported
interface BookingStub {
  id: string;
  bookingCode: string;
  guestName: string;
}

export type InvoiceStatus = "DRAFT" | "SENT" | "PAID" | "VOID";

export type PaymentType = "HOTEL_COLLECT" | "OTA_COLLECT";

// User stub for payment relations
interface UserStub {
  id: string;
  name: string;
}

export interface Payment {
  id: string;
  tenantId: string;
  propertyId?: string;
  bookingId: string;
  booking?: BookingStub;
  amount: number;
  method: string;
  paymentType: PaymentType;
  paymentDate: string;
  collectedBy?: UserStub;
  receivedFrom?: string;
  notes?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface InvoiceItem {
  id?: string; // Optional if generated by backend
  description: string;
  quantity: number;
  unitPrice: number;
  amount: number;
}

export interface Invoice {
  id: string;
  invoiceNumber: string;
  tenantId: string;
  propertyId: string;
  bookingId: string;
  booking?: BookingStub; // Optional relation
  issueDate: string; // ISO Date string
  dueDate: string; // ISO Date string
  status: InvoiceStatus;
  totalAmount: number;
  notes?: string;
  items?: InvoiceItem[]; // Array of invoice items
  createdAt?: string;
  updatedAt?: string;
}

// Keep existing placeholder types if they are still relevant
export interface FinanceData {
  id: string;
  amount: number;
  description?: string;
}

export interface FinanceSummary {
  totalRevenue: number;
  totalExpenses: number;
  netProfit: number;
}

