# Dockerfile for PMS Roomrise Backend (NestJS + Prisma)

# Use an official Node.js runtime as a parent image
# Choose a version compatible with your NestJS and Prisma setup (e.g., Node 20)
FROM node:20-alpine AS builder

# Set the working directory in the container
WORKDIR /usr/src/app

# Install Prisma CLI globally or use npx later
# RUN npm install -g prisma

# Copy package.json and package-lock.json (or yarn.lock)
COPY packages/backend/package*.json ./

# Install app dependencies
# Use --only=production if you handle devDependencies separately, but for build we need typescript etc.
RUN npm install

# Copy the rest of the backend application code
COPY packages/backend/ ./

# Copy Prisma schema
COPY packages/backend/prisma ./prisma/

# Generate Prisma Client
# Ensure DATABASE_URL is set during build if needed for generation, or use a dummy one if generation doesn't require connection
# RUN npx prisma generate
# It's often better to generate Prisma client in the final stage or upon startup

# Build the NestJS application
RUN npm run build

# --- Production Stage ---
FROM node:20-alpine

WORKDIR /usr/src/app

# Copy package.json and package-lock.json for production dependencies
COPY packages/backend/package*.json ./

# Install only production dependencies
RUN npm install --only=production

# Copy built application from builder stage
COPY --from=builder /usr/src/app/dist ./dist

# Copy Prisma schema and migrations for runtime use
COPY packages/backend/prisma ./prisma/

# Copy node_modules from builder stage (including Prisma client if generated there)
# Alternatively, generate Prisma client here
COPY --from=builder /usr/src/app/node_modules ./node_modules

# Generate Prisma Client (Recommended here if not done in builder or if runtime generation is preferred)
# Ensure DATABASE_URL is available at runtime for this command
# RUN npx prisma generate

# Expose the port the app runs on (default NestJS port is 3000)
EXPOSE 3000

# Define the command to run the application
# The entrypoint script will handle Prisma migrations and starting the app
CMD ["node", "dist/main.js"]

# Optional: Add healthcheck
# HEALTHCHECK --interval=30s --timeout=10s --start-period=1m \
#   CMD curl -f http://localhost:3000/health || exit 1

